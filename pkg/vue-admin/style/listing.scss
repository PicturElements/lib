@use "~@qtxr/scss-utils" as *;

$listing-params: (
	"weak-color",
	"error-color",
	"highlight",
	"accent-background",
	"row-border",
	"odd-row-background",
	"even-row-background"
);

@mixin listing(
	$weak-color: #555,
	$error-color: #bb2424,
	$highlight: #1b66bf,
	$accent-background: whitesmoke,
	$row-border: 1px solid #eee,
	$odd-row-background: white,
	$even-row-background: whitesmoke
) {
	.listing-content {
		position: relative;
		min-height: 100px;
		max-height: 500px;
		overflow: auto;

		&.loading {
			min-height: 200px;
		}

		&.no-results,
		&.error {
			text-align: center;
			padding: 10px 0;
			font-size: 90%;
			color: $weak-color;
		}

		&.error {
			text-align: center;
			padding: 10px 0;
			color: $error-color;
		}

		&.table {
			&.compact {
				display: flex;
				flex-direction: column;
				overflow: initial;

				.compact-table {
					overflow-x: hidden;
					overflow-y: auto;
					margin-top: 10px;
				}

				.compact-sort-order {
					position: relative;
					width: 30px;
					background: none;
					border: none;
					outline: none;
					cursor: pointer;

					&.sort-ascending,
					&.sort-descending {
						color: $highlight;

						&:after {
							content: "";
							position: absolute;
							top: 50%;
							right: 50%;
							margin: -9px -6px;
							border: 3px solid;
							border-left-color: transparent;
							border-top-color: transparent;
							width: 12px;
							height: 12px;
							border-radius: 0 2px 2px 2px;
							transform: rotate(45deg);
						}
					}

					&.sort-ascending:after {
						margin: -2px -6px;
						transform: rotate(-135deg);
					}
				}
			}

			> table {
				border-collapse: collapse;
				white-space: nowrap;
				width: 100%;

				tr:first-child {
					th {
						position: sticky;
						background: $odd-row-background;
						top: 0;
						z-index: 100000;
					}
				}

				th.sortable {
					position: relative;
					white-space: nowrap;
					user-select: none;
					cursor: pointer;

					&.arrow-left {
						padding-left: 30px;

						&.sort-ascending:after,
						&.sort-descending:after {
							left: 20px;
						}
					}

					&:not(.arrow-left) {
						padding-right: 30px;
					}

					&.sort-ascending,
					&.sort-descending {
						color: $highlight;

						&:after {
							content: "";
							position: absolute;
							top: 50%;
							right: 20px;
							margin: -8px -9px;
							border: 2px solid;
							border-left-color: transparent;
							border-top-color: transparent;
							width: 10px;
							height: 10px;
							border-radius: 0 2px 2px 2px;
							transform: rotate(45deg);
						}
					}

					&.sort-ascending:after {
						margin: -2px -9px;
						transform: rotate(-135deg);
					}
				}

				tr:nth-child(even) {
					background: $accent-background;
				}

				th,
				td {
					padding: 6px 8px;
					text-align: left;
					vertical-align: middle;
				}
			}
		}

		&.list {
			.list-row {
				background: $odd-row-background;

				+ .list-row {
					border-top: $row-border;
				}

				&:nth-child(even) {
					background: $even-row-background;
				}
			}
		}
	}

	.borderless {
		.table {
			border: none;
		}
	}
}
